<pre class='metadata'>
Title: String Interpolation and F-strings for C++
Abstract: This paper proposes string interpolation and f-strings for C++.
Editor: Hadriel Kaplan, hkaplan@juniper.net
Shortname: ????
Revision: 2
Audience: EWG
Status: D
Group: WG21
Date: 2023-10-10
Markup Shorthands: markdown yes
Markup Shorthands: biblio yes
Repository: https://github.com/hadrielk/cpp-proposals.git
Dark Mode: false
</pre>

Motivation
==========

Before this proposal:
```c++
int calculate(int);

std::string stringify(std::string_view prefix, int bits) {
    return std::format("{}:{}: got {} for {:#06x}", prefix, __LINE__, calculate(bits), bits);
}

void display(std::string_view prefix, int bits) {
    std::print("{}:{}: got {} for {:#06x}", prefix, __LINE__, calculate(bits), bits);
}
```

After this proposal:
```cpp
int calculate(int);

std::string stringify(std::string_view prefix, int bits) {
    return F"{prefix}-{__LINE__}: got {calculate(bits)} for {bits:#06x}";
}

void display(std::string_view prefix, int bits) {
    std::print(X"{prefix}-{__LINE__}: got {calculate(bits)} for {bits:#06x}");
}
```

The above shows two new mechanisms: an f-string and an x-string, denoted by `F""` and `X""` respectively.

F-strings are based on the same idea as python f-strings. They are wildly popular in modern python; arguably more popular than the python `str.format()` that the C++ `std::format()` was based on.

Many other programming languages also offer string-format interpolation, and use identical syntax. ([full list](https://en.wikipedia.org/wiki/String_interpolation#Examples))

X-strings (for "eXtracted String") have no equivalent in python. An x-string only extracts the expressions from the format-string, while an f-string invokes `std::format()` with them.

In other words, `F"..."` is just a convenient shorthand for `std::format(X"...")`.

The main benefit of f/x-strings is that it is far easier to see the argument usage locations, and it is less verbose.

For example in the code snippets above, in the second example it is easier to see that "`prefix`" goes before `__LINE__`, and "`bits`" is displayed in hex.

IDEs and syntax highlighters support them as well, displaying the embedded expressions in a different color:

```python
    f"{prefix}-{__LINE__}: got {calculate(bits)} for {bits:#06x}"
```


Proposed Solution
==========

The proposed solution is simple from a logical perspective: it's just fancy preprocessing.

This:
```cpp
    F"{prefix}-{__LINE__}: got {calculate(bits)} for {bits:#06x}";
    std::print(X"{prefix}-{__LINE__}: got {calculate(bits)} for {bits:#06x}");
```

Would be converted to this by the preprocessor, assuming the first line number is `42`:
```cpp
    ::std::format("{}-{}: got {} for {:#06x}", prefix, 42, calculate(bits), bits);
    std::print("{}-{}: got {} for {:#06x}", prefix, 43, calculate(bits), bits);
```

Note that this proposal does not automatically make the definition of `std::format<>` available for f-strings - i.e., the user must still `#include <format>`.

## Overview of Changes

We define two new *preprocessing-tokens*:

    1. An *f-string-literal* for `F"..."`.
    
    2. An *x-string-literal* for `X"..."`.

Both types may also be combined with `R` as `FR""` or `XR""` to indicate raw string contents, as well as an *encoding-prefix*, for example `u8F""` or `LXR""`.

The lexer creates such tokens in translation phase-3.

We also define two new builtin operators in the preprocessor:

    1. A variadic `_Concat()` operator, that accepts one or more string-literals of the same type and encoding, and concatenates them into one new longer string-literal preprocessing-token of that type and encoding.
    
        - Note that this could almost be accomplished with a macro today, but macros cannot concatenate two string-literal tokens because the result would not be a valid preprocessing-token.

    2. An `_Xtract()` operator, similar to the current `_Pragma()` operator, that accepts a single f-string-literal or x-string-literal preprocessing-token, modifies the string, and passes the modified string through phase-3 lexing and macro-invocation expansion.

And we add two new function-like pre-defined macros, as follows:

```cpp
    #define _Xstring(...) _Xtract( _Concat(__VA_ARGS__) )
    #define _Fstring(...) ::std::format( _Xstring(__VA_ARGS__) )
```

During phase-4 of translation, while processing the list of preprocessing-tokens as usual, the following conditions are added:

    1. If the preprocessing-token is an *f-string-literal*, the preprocessor saves it and peeks at the next preprocessing-token.

        - If the next token is another f-string-literal, it saves it and loops, peeking at the next token.

        - If the next token is not another f-string-literal, it breaks out of the loop, and passes the saved list of f-string-literals to the `_Fstring()` macro.

    2. If the preprocessing-token is an *x-string-literal*, the preprocessor saves it and peeks at the next preprocessing-token.

        - If the next token is another x-string-literal, it saves it and loops, peeking at the next token.

        - If the next token is not another x-string-literal, it breaks out of the loop, and passes the saved list of x-string-literals to the `_Xstring()` macro.

    3. In either case above, the original literal tokens(s) are removed and replaced by the expanded preprocessing-tokens.


Limitations
==========

F-strings cannot do everything `std::format()` can do, and x-strings cannot do everything that explicit format parameters would do.

A non-exhaustive list of differences:
    1. Index-numbered replacement-fields are not supported.
        - For example, `std::format("{0}{0}", a)` is not the same as `F"{a}{0}"`; the latter would become `format("{}{}", a, 0)`. One *can* do `F"{a}{a}"`, but that's not the same behavior.
    2. An f/x-string cannot be embedded within another.
        - For example, `std::format("{}", std::format("{}", a))` cannot be `F"{F\"{a}\"}"`, but can be `F"{std::format(\"{}\", a)}"`.
    3. String-literal types other than f/x-string-literals cannot be concatenated with f/x-string-literals.
    4. A different `std::locale` cannot be used, for f-strings.
    5. Runtime-only format-strings cannot be used, for obvious reasons.

But that's *ok*. Python f-strings also cannot do everything `str.format()` can do, and it hasn't caused mayhem nor prevented people from preferring to use f-strings.


FAQ
==========

## Why Both F and X Strings?

The initial draft began with *only* an f-string - i.e., always convert to invoking `std::format()`. Because that's the most common use-case, in the author's opinion, and follows what python does. The "f" literally stands for "formatted string". That's what it is and does, by-definition.

However, there was discussion on the mailing list regarding modifying the proposal to be a more-general interpolation mechanism. Concern was also raised about how to use the mechanism with `std::print()` and `println()` and such, which require a compile-time format-string and thus cannot use the `std::string` that `std::format()` would return.

As a compromise, this paper does *both*: it provides an x-string that expands to raw arguments usable for functions like `std::print()`, as well as an f-string that only uses them in `std::format()`.

At that point we *could* have removed f-strings and only proposed x-strings, and forced users to either explicitly invoke `std::format()` or to create their own "f-string" using a perprocessor macro:
```cpp
#define FMT(s) ::std::format(X##s)

std::cout << FMT("iteration #{i + 1} out of {n}\n");
```

But given how widely popular f-strings are in python, this proposal keeps an `F""`-based f-string as a native feature, with the expectation that they will be popular in C++.

Users do not need to write any additional code to use an f-string, nor preprocessor macros. And from an implementation perspective, supporting f-strings is relatively trivial since they're essentially a wrapper around x-string.


## Why the Preprocessor?

String interpolation could have been done in a later phase of translation, as an earlier paper [[P1819]] proposed.

However doing so would have meant that any macros in the original string would not be expanded/replaced in the output, and cause compilation failure instead.

For example C functions that happened to be implemented as macros, as well as user or library defines. Many programmers do not even know they are invoking function-like macros vs. functions, or object-like macros vs. static values.

Furthermore, some standardized and compiler-specific macros are widely used for debugging, such as `__FILE__` and `__LINE__`, etc.

The preprocessor also offers a clean separation between what is and is not native C++ code. And the contents of the pre-interpolated string is not native C++ code (at least, not *yet*).

Users also likely expect it to behave like textual transformation, as if it replaced the original string with new substrings of code. So this does what users think it does.


## Why not the Preprocessor?

Performing the interpolation within the preprocessor does have some drawbacks:
    * Multiple, separate string-literals must all be of the same type: an f-string-literal or x-string-literal.
    * Macros cannot be used to create separate string-literals for the f/x-string-literal in all cases.
    * We cannot prevent "creative" uses of the f/x-string from generating nearly-arbitrary code.

These issues are detailed in the next sub-sections.


### Multiple String Literals

It is common practice to split long string literals across lines. For example:
```cpp
    std::cout << "some long string literal of characters "
                 "continued by another string literal";
```

This proposal does support the above scenario, but only when all of the literals are of the same type:
```cpp
1. std::cout << F"{name}:" F" got {value}"; // ok
2. std::cout <<  "{name}:" F" got {value}"; // ERROR: mismatched literal types
3. std::cout << F"{name}:"  " got {value}"; // ERROR: mismatched literal types
4. std::cout << F"{name}:" X" got {value}"; // ERROR: mismatched literal types
```

Note that this is more restrictive than for existing string-literal types. Many existing string-literals can be concatenated with other types, although not all can.

The reasons for this restriction are:
    1. While an `F""` or `X""` might appear similar to `R""` or encoding-prefixes, they are arguably different: they're more like a command or macro invocation, as well as a format specifier. It is not logical to expect line 2 above to work, when one views the `F""` in that way.
    2. Supporting line 2 above would require the preprocessor to either backtrack, or to peek ahead for *every* string-literal token in the source. Both of these options are undesirable.
    3. Due to the above two reasons, if line 2 in the example is not supported, then line 3 should not be either - to be consistent, no matter which literal type comes first.
    4. Line 4 in the example is likewise illogical, as it is requesting two different actions to occur.


### Macro-generated String Literals

Programmers are accustomed to using macros that expand to strings literals. For example:
```cpp
    printf("value is %" PRIu32 "\n", value);
    printf("value is " COLOR_RED "%s" COLOR_CLEAR "\n", value);
    std::cout << GEN_STRINGS(x, y, z) << "\n"; // macro creates multiple literals
```

Instead, the macros must be in replacement fields of the same format string used in the f/x-string-literal.

In other words:
```cpp
    F"value=" COLOR_RED F"{value}" COLOR_CLEAR;             // ERROR
    std::print(X"value=" COLOR_RED X"{value}" COLOR_CLEAR); // ERROR

    F"value={COLOR_RED} {value} {COLOR_CLEAR}";             // ok
    std::print(X"value={COLOR_RED} {value} {COLOR_CLEAR}"); // ok
```

The reasons for this restriction are:

    1. The whole point of this proposal is to use the format-string style with the variables inside the string, where they're used. This proposal is not intended to *replace* existing mechanisms, but rather to provide a better way to express intent.

    2. The preprocessor is only a one-pass transformer, so even if it "peeked" at the next preprocessing-token(s), it wouldn't know that the token `COLOR_RED` is a macro yet, and wouldn't replace it with its replacement literal yet.


### Constraining What F/X-Strings Can Do

The contents of the f/x-strings may include arbitrary code, such that the resulting sequence of tokens do more than what this proposal's purpose intends.

For example, this generates more arguments than the format-string has replacement fields for, which will even successfully compile later because it is allowed:
```cpp
    std::print(X"{foo, bar}");
    // => std::print("{}", foo, bar); // ok, extra arg is ignored by print()
```

And this example does something else entirely:
```cpp
    std::cout << F"{key); if (map.contains(key)) abort(}";
    if (map.contains(key)) { ... }
```

The above would be converted to this:
```cpp
    std::cout << ::std::format("{}", key); if (map.contains(key)) abort();
    if (map.contains(key)) { ... }
```

While it may be technically possible to prevent such cases, we believe it is reasonable to allow them instead, for the following reasons:

    1. The same behavior can be achieved with traditional macro expansion today.

    2. It is arguably a feature, not a bug.
    
        - This is not a teachability issue nor poor default behavior - the programmer is explicitly writing that code into the format string.

        - If a programmer wishes to use f/x-strings to perform unconventional transformations, for whatever reason, they should be free to do so. It's their code.

        - Programmers might find creative uses for this ability, that we cannot foresee.

    3. It is not clear that we can actually prevent it, from a practical point of view.
    
        - We cannot, for example, require the output of conversion to allow only post-processing tokens of expresssions, because macro expansion might have created multiple separate string-literals as well.

        - If we created a specific list of what was allowed, we would have to potentially update this list for every future C++ version, and possibly omit some valid new ones.

        - One thing that might be reasonable to do, is require the final generated tokens to have balanced tokens for parentheses, braces, and brackets.

    4. It is not the role of the preprocessor to prevent such cases. For example, if this change becomes adopted by WG14 some time later for the C-preprocessor, it could not reuse the same implementation because the language grammar is different.



Grammar
==========

The *preprocessing-token* in [lex.pptoken] is extended to include:
    *f-string*
    *x-string*


A new section within Preprocessing Directives [cpp] titled "F/X String Literal Processing" is added with the following grammar:

    *f-string*:
        F " *fx-format-string* "
    *x-string*:
        X " *fx-format-string* "
    *fx-format-string*:
        *extraction-field*
        *extraction-field* *fx-format-string*
        *fx-format-char*
        *fx-format-char* *fx-format-string*
    *fx-format-char*:
        *fmt-escape*
        *c-char*
    *fmt-escape*:
        { {
        } }
    *extraction-field*:
        { *output-argument* format-specifier<sub>opt</sub> }
    *output-argument*:
        ( *expression* )
        *expression*
    *format-string*:
        *the character sequence for a "format string" defined in [format.string]*


Supporting Arbitrary Expressions
==========

Some concerns were raised on the mailing list regarding allowing arbitrary expressions in the replacement-field, vs. only identifiers/lvalues.

This same concerns also came up when python added f-strings. But full expressions were ultimately supported in python because they were deemed too useful to exclude.

For example, the following types of uses would be very common:

```cpp
    F"number of entries: {vec.size()}";
    F"{key} exists: {map.contains(key)}";
    F"is valid: {opt.has_value()}";
    F"iteration #{i + 1} out of {n}";
    F"num missing: {total - found}";
```

Therefore, this proposal does support arbitrary expressions within f-string replacement-fields. In fact, technically they can be more than just expressions.

Allowing them has some downsides, however:

1. Some expressions will create syntactic ambiguity for parsing the replacement-field.
2. Each expression string has to be fully tokenized, instead of becoming just an identifier token.
3. Expressions can contain new tokens such as string-literals, but those were identified and concatenated already in earlier translation phases.
4. Compilation failure of the expressions in later phases of translation will be harder to correlate to the f/x-string's literal text.
5. Code obfuscation is easier to achieve.
6. Raw source-code scanners (linters, indexers, etc.) would need to parse f/x-strings to detect the expressions.

The above issues are discussed in more detail in later sections.


## Handling Syntax Ambiguity

Syntactic ambiguity can arise due to the following:

1. The format-specifier starts with a single colon, but expressions may also have single colons in them.
2. The replacement-field ends with a closing-brace, but expressions may also end with a closing-brace, making it appear as an escape-sequence.

For example the first line of the following has a single colon `:` between `2` and `6`, which will be treated as separating an optional `format-spec`, and will thus convert but fail to compile later:
```cpp
    F"{check() ? 2 : 6}"; // ERROR: converts, but fails to compile later
```
Because the previous example converts to this:
```cpp
    ::std::format("{: 6}", check() ? 2); // ERROR
```

The same issue arose for python (due to their lambda syntax), and their chosen solution was to require any such expression to be wrapped by parentheses.

This proposal chooses that same solution:
```cpp
    F"{(check() ? 2 : 6)}";      // ok
    F"{(check() ? 2 : 6):#04x}"; // ok
    F"{(some_type{})}";          // ok
```

The rationale for this is that (1) it is simple to parse and detect during preprocessing, (2) it should look familiar to C++ programmers, and (3) it remains consistent with python just as `std::format()` does.



Customization Points
==========

As defined in this proposal, there is no customization available. For example one could not use a different library implementation in place of `std::format()` for f-strings, such as `fmt::format()`.

The user can instead invoke `fmt::format(X"...")` should they wish to, or even create a preprocessing function-like macro such as:
```cpp
#define F(s) ::fmt::format(X##s)

std::cout << F("iteration #{i + 1} out of {n}\n");
```


Future Proofing
==========

One concern raised on the mailing list regards future-proofing: what if a new `std::format2()` were created? How would we switch to that?

We think the answer is: C++ would just update the specification to make it use `std::format2()`, for that version of C++, if it's sufficiently compatible. Otherwise it would require a new prefix for a new string-literal type, if such is warranted. But that is no different than requiring a new function name.

Even in terms of ABI stability: so long as a standard library implementation does not itself *use* an f/x-string in its publicly visible code or ABI, its ABI would not change nor would we run afoul of the one-definition-rule.

Because an f/x-string is not a C++ type or data structure. It cannot cross any boundaries. It is more akin to a preprocessing function-like macro; thus as long as no code in a library ever uses/invokes it, changing its behavior has no effect on that library.


Failure Cases
==========

In a few cases a user error for f/x-string use can be detected during conversion, but mostly only for malformed format string scenarios, such as a mismatched number of braces.

For *most* failure cases, the error will only be detected in later translation phases.

Some of the new failure cases that could arise with f-strings may not seem obvious to users at first glance.

Note that [[P1819R0]] would have the same issues, but with the errors occuring in another area of code: wherever the unnamed callable is invoked.

## Expression Syntax Clashes

One potential for confusion is that not every arbitrary expression will work inside of the replacement-field.

For example the first line of the following has a single colon `:` between `2` and `6`, which will be treated as separating an optional format-spec, and will thus convert but fail to compile later:
```cpp
    F"{check() ? 2 : 6}";   // ERROR: converts, but fails to compile later
    F"{(check() ? 2 : 6)}"; // ok
```
Because the previous example converts to this:
```cpp
    ::std::format("{: 6}", check() ? 2);  // ERROR
    ::std::format("{}", check() ? 2 : 6); // ok
```

Ternary expressions are not the only case a single colon can appear in C++ expresions. For example they appear within range-based for-loops, switch-case statements, and labels. Reflection's splicing syntax also uses single colons in the current proposals.


Likewise the alternative tokens (digraphs) `<:` and `:>` can also cause issues for similar reasons:
```cpp
    F"{my_vector[42]}";     // ok
    F"{my_vector<:42:>}";   // ERROR: fails to compile later
    F"{(my_vector<:42:>)}"; // ok
```

Or the expression might end with a closing brace, and clash with the replacement-field's closing brace to appear as an escape-sequence:
```cpp
    F"{some_type{}}";   // ERROR: mismtached braces
    F"{some_type{} }";  // ok
    F"{(some_type{})}"; // ok
```

## Pathalogical Cases

Of course some silly things like this will fail:
```cpp
    F"{\"}\"}";    // ERROR: conversion-parse error, mismatched braces
    F"{F\"bar\"}"; // ERROR: fails to compile later, since no second conversion occurs
```


Safety Considerations
==========

X-strings do not add any new unsafe conditions that did not already exist for the extracted expressions.

F-strings do not add any new unsafe conditions that did not already exist for `std::format`. For example any access to invalid memory locations within replacement-field expressions would have also occured for explicit arguments to `std::format()`.

The returned `std::string` from the f-string's converted-to `std::format()` call is a prvalue and subject to the lifetime rules for such.

Raw source-code scanners do need to be updated to parse f/x-string content in order to detect the expressions within. If such a scanner is used for safety or compliance checks, it will need to be updated. However, this is also true for many new C++ language changes, so it should not be a surprise.


Security Considerations
==========

Allowing f/x-strings to contain arbitrary C++ expressions within a literal string, and generating new code based on them, opens a new opportunity for code obfuscation.

Consider:
```cpp
    std::cout << F"{key); if (map.contains(key)) abort(}";
    if (map.contains(key)) { ... }
```

The above would be converted to this:
```cpp
    std::cout << ::std::format("{}", key); if (map.contains(key)) abort();
    if (map.contains(key)) { ... }
```

Although this is a new avenue for obfuscation, similar obfuscation can already be achieved today with traditional preprocessor macros.

The good news is that the format-string cannot be generated at runtime from external input. And being in the f/x-string makes it more visible/exposed than via preprocessor macros.


Prior Work
==========

A previous proposal [[P1819R0]] already proposed to add f-string support for C++, but in a fundamentally different way than this one.

[[P1819R0]] would make f-strings into first-class language constructs. An f-string would be interpolated and generate what is basically an unnamed lambda; one that satisfies a new "InterpolatedLiteral" concept. This unnamed callable would then be passed as a parameter to using functions that accept it and invoke it to do whatever. For example `std::ostream` would be modified to accept any type satisfying "InterpolatedLiteral", and thereby allow one to do "`std::cout << f"{bar}";`".

This unnamed pseudo-lambda would capture all variables by reference, and needs to be invoked by being given *another* callable, and that second callable is invoked with all the separate pieces of the interpolated literal. See [[P1819R0]] for the type of code one would need to write to handle this.

While the proposed mechanism in [[P1819R0]] is clever and highly customizable after interpolation, it's also complicated to add support for, and does not support format specifiers. It would also be difficult to diagnose compilation errors for, because they would happen somewhere else in the middle of template-instantiated callable code.

It does this in a simple, straight-forward manner. It is easy to easy to understand, easy to diagnose errors for, etc. It also supports format specifiers, including user-defined ones.

Note that unlike [[P1819R0]], the f-string in this paper ultimately generates what `std::format()` generates: a `std::string`.

No library code needs to change to handle a callable. Nothing needs to be captured. There's no additional complexity.


Acknowledgements
==========

I would like to thank the members of the std-proposals maling list for their time and discussion. Their feedback significantly improved the proposed solution.


Changes
==========

## Changes From Draft Revision-1

1. Changed the conversion to be performed in stage-4 preprocessing, due to the need to support macros within the string.

    - This changed large portions of the document, added builtins, macros, etc.

2. Added support for multiple f/x strings to be concatenated.

3. Added details for how it works, and the grammar.

4. Added justifications for restrictions/limitations.

5. Removed most mentions of [[P1819R0]], and only discuss it in one subsection.


## Changes From Draft Revision-0

1. Added the notion of an x-string ("eXtracted String" or "eXpanded String"?) separate from an f-string, based on discussions on the mailing list.

2. Changed the handling of the colon format-spec delimiter: in rev-0 the last standalone colon was considered the delimiter; whereas in rev-1 the *first* standalone colon is.

    - This was done to follow the behavior of `std::format()`, to allow things like `F"The time is { chrono::system_clock::now() :HH:MM:SS}"`.

3. Added the ability to use parentheses to wrap an expression, to avoid syntax ambiguity issues.

4. Added several new sections based on discussion on the mailing list, as well as sections for safety and security.

5. Removed the text and code example for a potential customization point. It wasn't technically part of the proposal, and added confusion I think.
