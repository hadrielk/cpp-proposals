<pre class='metadata'>
Title: F-strings for C++
Abstract: This paper proposes f-strings for C++ in a simpler way than P1819.
Editor: Hadriel Kaplan, hkaplan@juniper.net
Shortname: ????
Revision: 0
Audience: EWG
Status: D
Group: WG21
Date: 2023-10-10
Markup Shorthands: markdown yes
Markup Shorthands: biblio yes
Repository: https://github.com/hadrielk/cpp-proposals.git
</pre>

Motivation
==========

Before this proposal:
```c++
std::string name;
int calculate();

void display(std::string_view prefix, uint64_t bits) {
    std::cout << std::format("{}_{}: got {} for {:#06x}", prefix, name, calculate(), bits);
}
```

After this proposal:
```cpp
std::string name;
int calculate();

void display(std::string_view prefix, uint64_t bits) {
    std::cout << F"{prefix}_{name}: got {calculate()} for {bits:#06x}";
}
```

In python they're officially "formatted string literals", but generally known as f-strings. They are wildly popular in modern python; arguably more popular than the python `str.format()` that the C++ `std::format()` was based on.

F-strings are less verbose, but more importantly, it is far easier to see the argument usage locations.

For example in the code snippets above, in the f-string case it is easier to see that "`prefix`" goes before "`name`", and "`bits`" is displayed in hex.

IDEs and syntax highlighters support them as well, displaying the embedded expressions in a different color:

```python
    f"{prefix}_{name}: got {calculate()} for {bits:#06x}"
```


Proposed Solution
==========

The proposed solution is simple from a logical perspective: it's basically just a fancy form of preprocessing.

This:
```cpp
    std::cout << F"{prefix}_{name}: got {calculate()} for {bits:#06x}";
```

Would be converted to this, between phase 6 and 7 of translation:
```cpp
    std::cout << ::std::format("{}_{}: got {} for {:#06x}", prefix, name, calculate(), bits);
```

The detailed idea and steps are as follows:

    * An f-string is *not* a new string-literal sub-type, but the "F" appears in the same location as a string-literal encoding-prefix or "R" raw-string prefix. It denotes a new "f-string" type.
    * Between translation phase 6 and 7, after concatenation of string-literals, all f-strings are converted as follows:
 
        1. The "F" is replaced with the character sequence "`::std::format(`", and a closing parenthesis "`)`" is placed after the double-quoted format string.
        
        2. Each character that is not part of a replacement-field is left alone, including double-brace escape sequences.

        3. If a replacement-field begins with a digit, it is left alone.

        4. If the replacement-field has a semi-colon `:`, that is *not* next to another semi-colon, then only the characters up to the last such standalone semi-colon are copied to output-arguments. The semi-colon and any characters beyond it in the replacement-field are left in the new format string.

        5. Otherwise the contents of the replacement-field are copied verbatim to new output-arguments.

        6. Each new output-argument created by the above steps, causes a comma "`,`" and the output-argument to be inserted before the trailing "`)`" inserted in step-1 above.

        7. The opening and closing braces surrounding the replacement-field are also left in the new format string.
        
    * After conversion, it is now an invocation of `std::format(<new-format-string>, <output-arg0>, ...)` and handled as such in a later phase.

That's it. No template code. No lambdas. No new C++ types.

It should also be relatively simple for compilers to implement, easy to understand, and (hopefully) easy to standardize.

Note that this proposal does not automatically make the definition of `std::format<>` available - i.e., the user must still `#include <format>`.


Prior Work
==========

A previous proposal [[P1819R0]] already proposed to add f-string support for C++, but in a fundamentally different way than this one.

[[P1819R0]] would make f-strings into first-class language constructs. An f-string would be interpolated and generate what is basically an unnamed lambda; one that satisfies a new "InterpolatedLiteral" concept. This unnamed callable would then be passed as a parameter to using functions that accept it and invoke it to do whatever. For example `std::ostream` would be modified to accept any type satisfying "InterpolatedLiteral", and thereby allow one to do "`std::cout << f"{bar}";`".

This unnamed pseudo-lambda would capture all variables by reference, and needs to be invoked by being given *another* callable, and that second callable is invoked with all the separate pieces of the interpolated literal. See [[P1819R0]] for the type of code one would need to write to handle this.

While the proposed mechanism in [[P1819R0]] is clever and highly customizable after interpolation, it's also complicated to add support for, and does not support format specifiers. It would also be difficult to diagnose compilation errors for, because they would happen somewhere else in the middle of template-instantiated callable code.

It's a much larger scope solution, which just so happens to also provide f-strings as essentially a side-effect.

Because fundamentally [[P1819R0]] does what it says: it introduces support for string interpolation. Period. It has little to do with string formatting, f-strings, or `std::format()`; and arguably the "f" prefix used in the paper is misleading. It's just that one can use string interpolation to provide f-strings too - if one modifies all other consuming library code functions to handle the "InterpolatedLiteral" callable properly.

The new proposal in *this* document, however, only solves the problem at hand: using f-strings as a shorthand convenience replacement for `std::format()`.

It does this in a simple, straight-forward manner. It is easy to easy to understand, easy to diagnose errors for, etc. It also supports format specifiers, including user-defined ones.

Unlike [[P1819R0]], the f-string in this paper ultimately generates what `std::format()` generates: a `std::string`.

No library code needs to change to handle a callable. Nothing needs to be captured. There's no additional complexity.


What Is Not Supported
==========

F-strings cannot do everything `std::format()` can do.

A non-exhaustive list of differences:
    1. Nested replacement fields are not supported in f-strings. I.e., `std::format("{:{}f}", pi, 10);)` cannot be represented as  `F"{pi:{10}f}"`.
    2. Preprocessor macros will not be expanded within f-strings. I.e., `F"{__LINE__}";` won't work.
    3. An f-string's format string cannot be a raw-string. I.e., `std::format(R"(...)")` is not supported in f-string form.
    4. An f-string cannot support wide strings, unless we allow an encoding-prefix before the "F".
    5. An f-string cannot use a different `std::locale`, unless we add support for customization points (see later section).
    6. An f-string cannot handle runtime-only format strings, for obvious reasons.

Note that the same limitations affect [[P1819R0]] as well.

But that's *ok*. Python f-strings also cannot do everything `str.format()` can do, and it hasn't caused mayhem nor prevented people from preferring f-strings.


What about `std::print()` and such?
==========

I believe that a `std::format_string<>` is implicitly constructible from the `std::string` r-value an f-string would create (via the `std::format()` call), so f-strings should be usable in any function that accepts a `std::basic_format_string`.

For example these should all work:
```cpp
    std::print(F"hello C++{20 + 6}");
    std::println(F"hello C++{13 * 2}");
    std::format_to(std::back_inserter(buffer), F"hello C++{26}");
```

Customization Points
==========

As defined in this current proposal, there is no customization avialable - for example one could not use a different library implementation in place of `std::format()`, such as `fmt::format()`.

If we truly must support such an ability, we could make f-strings convert to some new function name instead of `std::format`.

But the standard library `<format>` would need to define that new function such that `std::format` would be invoked by-default if the user did not choose to override it.

Since ADL cannot be used in this scenario, and since the function needs to be templated for the arguments, it might need to be something like this:
```cpp
// in header <format>
namespace std {

template <bool>
struct f_string {
    template <class... Args>
    static auto invoke(Args&&... args) {
        return format(forward<Args>(args)...);
    }
};

} // namespace std
```

And the user could do this to change it:
```cpp
// in user header
namespace std {

template <>
struct f_string<true> {
    template <class... Args>
    static auto invoke(Args&&... args) {
        return ::fmt::format(std::forward<Args>(args)...);
    }
};

} // namespace std
```

And of course f-strings would need to convert from `F"some {var}"` to `::std::f_string<true>::invoke("some {}", var)`.



Error Cases
==========

In a few cases a user error for f-string use can be detected during conversion, but mostly only for malformed format string scenarios, such as a mismatched number of braces.

For *most* error cases, the error will only be detected in later translation phases.

Some of the new error cases that could arise with f-strings may not seem obvious to users at first glance.

One potential for confusion is that not every arbitrary expression will work inside of the replacement-field.

For example the first line of the following has a single semi-colon `:` between `2` and `6`, which will be treated as separating an optional format-spec, and will thus convert but fail to compile later:
```cpp
    F"{check() ? 2 : 6}";  // ERROR: converts, but fails to compile later
    F"{check() ? 2 : 6:}"; // ok
```
Because the previous example converts to this:
```cpp
    ::std::format("{: 6}", check() ? 2);   // ERROR
    ::std::format("{:}", check() ? 2 : 6); // ok
```

Likewise the alternative tokens (digraphs) `<:` and `:>` can also cause issues for similar reasons:
```cpp
    // my_vector<:42:> is the same as my_vec[42] but using digraphs
    F"{my_vector<:42:>}";  // ERROR: fails to compile later
    F"{my_vector<:42:>:}"; // ok
    F"{my_vector[42]}";    // ok
```

Another example is when a preprocessing macro is used within the f-string:
```cpp
    #define MULT(x, y) x * y

    F"{ MULT(1,2) }";         // ERROR: fails to compile later
    F"{__FILE__}:{__LINE__}"; // ERROR: fails to compile later
```
Since preprocessing occurs before f-string conversion, and since the preprocessor will not perform macro expansion/replacement within literal strings, the above macro names will not be processed/replaced. Thus the user will get an error message in a later phase, when the compiler cannot resolve the macro name to a function.

And of course some silly things like this will fail:
```cpp
    F"{\"}\"}";    // ERROR: conversion-parse error, mismatched braces
    F"{F\"bar\"}"; // ERROR: fails to compile later, since no second conversion occurs
```

Note [[P1819R0]] would have the same issues as above, but with the errors occuring in another area of code: wherever the unnamed callable is invoked.
